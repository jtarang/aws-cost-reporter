name: ACR CD Pipeline


on:
  workflow_run:
    workflows: [ "ACR CI Pipeline" ]
    types:
      - completed

jobs:
  deploy:
    name: Deploy Package
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read  # Access to the repository contents (e.g., checkouts, fetching)
      pull-requests: write  # If the CD pipeline interacts with PRs


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Extract Git commit hash and Set Variables
        id: version
        run: |
          echo "LAMBDA_ZIP_NAME=aws-cost-reporter-lambda-$GITHUB_SHA.zip" >> $GITHUB_ENV
          echo "LAMBDA_ARTIFACT_NAME=aws-cost-reporter-lambda-$GITHUB_SHA" >> $GITHUB_ENV
          echo "LAMBDA_ARTIFACT_DIR=$GITHUB_WORKSPACE/artifact" >> $GITHUB_ENV
          echo "TF_PATH=$GITHUB_WORKSPACE/tf/" >> $GITHUB_ENV
          echo "TF_PLAN_PATH=$GITHUB_WORKSPACE/tf/plans/$GITHUB_RUN_ID-$GITHUB_SHA.tfplan" >> $GITHUB_ENV
          echo "TELEPORT_CLUSTER_VERSION=$(curl https://${{ secrets.TELEPORT_CLUSTER_DOMAIN }}/v1/webapi/automaticupgrades/channel/default/version | sed 's/v//')" >> $GITHUB_ENV

      - name: Clean up previous artifact directory
        run: rm -rf ${{ env.LAMBDA_ARTIFACT_DIR }} /tmp/tbot /tmp/bot-config.yaml && mkdir -p ${{ env.LAMBDA_ARTIFACT_DIR }} ~/.aws

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.LAMBDA_ZIP_NAME }}
          path: ${{ env.LAMBDA_ARTIFACT_DIR }}
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}

      - name: Fetch Teleport binaries
        uses: teleport-actions/setup@v1
        with:
          version: ${{ env.TELEPORT_CLUSTER_VERSION }}

      - name: Write tbot config
        run: |
          cat <<EOF > /tmp/bot-config.yaml
          version: v2
          onboarding:
            join_method: github
            token: ${{ secrets.TELEPORT_BOT_TOKEN }}
          storage:
            type: directory
            path: /tmp/tbot
            symlinks: try-secure
            acls: "off"
          services:
            - type: identity
              destination:
                type: directory
                path: /tmp/tbot
                symlinks: try-secure
                acls: "off"
              ssh_config: "on"
          debug: false
          auth_server: ${{ secrets.TELEPORT_CLUSTER_DOMAIN }}:443
          oneshot: true
          fips: false
          outputs:
            - type: workload-identity-x509
              destination:
                type: directory
                path: /tmp/tbot
              selector:
                name: ${{ secrets.TELEPORT_WORKLOAD_IDENTITY }}
          EOF



      - name: Get Teleport Status and Start Workload Identity
        run: |
          export TELEPORT_ANONYMOUS_TELEMETRY=1 
          # --certificate-ttl might be changed to --credential-ttl
          tbot start -c /tmp/bot-config.yaml  --certificate-ttl 30m --renewal-interval 10m

      - name: Generate AWS Credentials using Workload Identity
        run: |

          curl https://rolesanywhere.amazonaws.com/releases/1.4.0/X86_64/Linux/aws_signing_helper --output /tmp/tbot/aws_signing_helper
          chmod +x /tmp/tbot/aws_signing_helper
          # Generate AWS credentials using the Teleport identity
          /tmp/tbot/aws_signing_helper credential-process \
            --certificate /tmp/tbot/svid.pem \
            --private-key /tmp/tbot/svid_key.pem \
            --profile-arn "${{ secrets.AWS_WORKLOAD_PROFILE_ARN }}" \
            --trust-anchor-arn "${{ secrets.AWS_WORKLOAD_TRUST_ANCHOR_ARN }}" \
            --role-arn "${{ secrets.AWS_WORKLOAD_ROLE_ARN }}" > /tmp/tbot/aws_creds.json

      - name: Get AWS credentials from JSON file
        id: aws-creds
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = $(jq -r '.AccessKeyId' /tmp/tbot/aws_creds.json)" >> ~/.aws/credentials
          echo "aws_secret_access_key = $(jq -r '.SecretAccessKey' /tmp/tbot/aws_creds.json)" >> ~/.aws/credentials
          echo "aws_session_token = $(jq -r '.SessionToken' /tmp/tbot/aws_creds.json)" >> ~/.aws/credentials
          chmod 600 ~/.aws/credentials  # Secure the credentials file

      - name: Configure AWS credentials using aws-actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region : ${{ secrets.DEFAULT_AWS_REGION }}
          aws-access-key-id: ${{ steps.aws-creds.outputs.aws_access_key_id }}
          aws-secret-access-key: ${{ steps.aws-creds.outputs.aws_secret_access_key }}
          aws-session-token: ${{ steps.aws-creds.outputs.aws_session_token }}

      - name: Install Terraform
        id: install-terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: |
          export TF_VAR_lambda_file_path=${{ env.LAMBDA_ARTIFACT_DIR }}/${{ env.LAMBDA_ZIP_NAME }}
          cd ${{ env.TF_PATH }} && terraform init

      - name: Terraform Plan
        id: plan
        run: |
          export TF_VAR_lambda_file_path=${{ env.LAMBDA_ARTIFACT_DIR }}/${{ env.LAMBDA_ZIP_NAME }}
          export TF_VAR_slack_webhook_url="${{ secrets.SLACK_WEBHOOK_URL }}"
          cd ${{ env.TF_PATH }} && terraform plan --var-file=$GITHUB_WORKSPACE/tf/tfvars/${{ secrets.CI_CD_TFVARS }} -out="${{ env.TF_PLAN_PATH }}"

      - name: Terraform Apply
        id: apply
        run: |
          export TF_VAR_lambda_file_path=${{ env.LAMBDA_ARTIFACT_DIR }}/${{ env.LAMBDA_ZIP_NAME }}
          export TF_VAR_slack_webhook_url="${{ secrets.SLACK_WEBHOOK_URL }}"
          cd ${{ env.TF_PATH }} && terraform apply -auto-approve "${{ env.TF_PLAN_PATH }}"

      - name: Clean up
        if: always()
        run: pkill tbot || true && rm -rf ${{ env.LAMBDA_ARTIFACT_DIR }} /tmp/tbot /tmp/bot-config.yaml ~/.aws
